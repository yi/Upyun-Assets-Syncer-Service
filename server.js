// Generated by CoffeeScript 1.6.3
(function() {
  var CMD_SYNC_AMF, CMD_SYNC_GRAPHICS, CMD_SYNC_TIMESTAMPE, CURRENT_JOB, JOB_SYNC_AMF, JOB_SYNC_GRAPHICS, JOB_SYNC_TIMESTAMP, KV_CLIENTS, PATH_TO_SYNCER, app, child_process, io, logger, runJob, server, util;

  app = require('express')();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  util = require('util');

  logger = require('dev-logger');

  child_process = require('child_process');

  CURRENT_JOB = null;

  PATH_TO_SYNCER = "" + __dirname + "/node_modules/upyun-assets-syncer/bin/upsyncer.coffee";

  JOB_SYNC_GRAPHICS = [PATH_TO_SYNCER];

  JOB_SYNC_AMF = [PATH_TO_SYNCER];

  JOB_SYNC_TIMESTAMP = [PATH_TO_SYNCER];

  CMD_SYNC_GRAPHICS = 'sync_graphics';

  CMD_SYNC_AMF = 'sync_amf';

  CMD_SYNC_TIMESTAMPE = 'sync_timestamp';

  KV_CLIENTS = {};

  server.listen(8088);

  app.get('/', function(req, res) {
    return res.sendfile(__dirname + '/index.html');
  });

  runJob = function(config) {
    if (!(Array.isArray(config) && config.length > 0)) {
      logger.error("[server::runJob] bad argument. config:" + config);
      return;
    }
    if (CURRENT_JOB != null) {
      io.sockets.emit('error', {
        alert: "当前正有一个任务在进行，请等待当前任务完成后在进行操作"
      });
      return;
    }
    CURRENT_JOB = child_process.spawn.apply(null, config);
    CURRENT_JOB.stdout.on('data', function(data) {
      data = String(data);
      console.log('stdout: ' + data);
      io.sockets.emit('log', {
        message: data
      });
    });
    CURRENT_JOB.stderr.on('data', function(data) {
      data = String(data);
      console.log('stderr: ' + data);
      io.sockets.emit('error', {
        message: data
      });
    });
    CURRENT_JOB.on('close', function(code) {
      console.log('child process exited with code ' + code);
      CURRENT_JOB.removeAllListeners();
      return CURRENT_JOB = null;
    });
  };

  io.sockets.on('connection', function(socket) {
    KV_CLIENTS[socket.id] = socket;
    io.sockets.emit('log', {
      message: "client " + socket.id + " connected"
    });
    return socket.on('action', function(data) {
      logger.log("[server::on::action] cmd:" + data.cmd);
      switch (data.cmd) {
        case CMD_SYNC_GRAPHICS:
          runJob(JOB_SYNC_GRAPHICS);
          break;
        case CMD_SYNC_AMF:
          runJob(JOB_SYNC_AMF);
          break;
        case CMD_SYNC_TIMESTAMPE:
          runJob(JOB_SYNC_TIMESTAMP);
      }
    });
  });

  return;

}).call(this);
